const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const path = require('path');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Database models
const Food = require('./models/Food');
const Order = require('./models/Order');

// Middleware
app.use(express.json());
app.use(cors());

// Configure multer for file uploads (in memory)
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: (req, file, cb) => {
    const filetypes = /jpeg|jpg|png|gif/;
    const mimetype = filetypes.test(file.mimetype);
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());

    if (mimetype && extname) {
      return cb(null, true);
    }
    cb(new Error('Only image files are allowed'));
  }
});

// Database connection
mongoose.connect(process.env.MONGODB_URI)
  .then(() => {
    console.log('✅ Connected to MongoDB Atlas');
    app.listen(PORT, () => {
      console.log(`🚀 Server running on port ${PORT}`);
    });
  })
  .catch(err => {
    console.error('❌ MongoDB connection error:', err.message);
    process.exit(1);
  });

// Routes
app.get('/', (req, res) => {
  res.send('Food Delivery API is running');
});

// Food Routes with Image Upload
app.post('/foods', upload.single('image'), async (req, res) => {
  try {
    const { name, price, description } = req.body;

    if (!name || !price || !description || !req.file) {
      return res.status(400).json({ error: 'All fields including image are required' });
    }

    const newFood = new Food({
      name,
      price,
      description,
      image: {
        data: req.file.buffer,
        contentType: req.file.mimetype
      }
    });

    const savedFood = await newFood.save();

    // Don't send binary data in response
    const responseFood = savedFood.toObject();
    delete responseFood.image;

    res.status(201).json({
      message: '✅ Food saved successfully',
      data: responseFood
    });
  } catch (error) {
    console.error('❌ Error saving food:', error.message);
    res.status(500).json({ error: 'Error saving food' });
  }
});

// Get food image
app.get('/foods/:id/image', async (req, res) => {
  try {
    const food = await Food.findById(req.params.id);
    if (!food || !food.image.data) {
      return res.status(404).json({ error: 'Image not found' });
    }

    res.set('Content-Type', food.image.contentType);
    res.send(food.image.data);
  } catch (error) {
    console.error('❌ Error retrieving image:', error.message);
    res.status(500).json({ error: 'Error retrieving image' });
  }
});

// Get food details (without image data)
app.get('/foods', async (req, res) => {
  try {
    const foods = await Food.find().select('-image.data');
    res.status(200).json({
      message: '✅ Retrieved all foods successfully',
      data: foods
    });
  } catch (error) {
    console.error('❌ Error retrieving foods:', error.message);
    res.status(500).json({ error: 'Error retrieving foods' });
  }
});

app.get('/foods/:id', async (req, res) => {
  try {
    const food = await Food.findById(req.params.id).select('-image.data');
    if (!food) {
      return res.status(404).json({ error: 'Food not found' });
    }
    res.status(200).json({
      message: '✅ Retrieved food successfully',
      data: food
    });
  } catch (error) {
    console.error('❌ Error retrieving food:', error.message);
    res.status(500).json({ error: 'Error retrieving food' });
  }
});

app.put('/foods/:id', upload.single('image'), async (req, res) => {
  try {
    const { name, price, description } = req.body;
    const updateData = { name, price, description };

    if (req.file) {
      updateData.image = {
        data: req.file.buffer,
        contentType: req.file.mimetype
      };
    }

    const updatedFood = await Food.findByIdAndUpdate(
      req.params.id,
      updateData,
      { new: true }
    ).select('-image.data');

    if (!updatedFood) {
      return res.status(404).json({ error: 'Food not found' });
    }

    res.status(200).json({
      message: '✅ Food updated successfully',
      data: updatedFood
    });
  } catch (error) {
    console.error('❌ Error updating food:', error.message);
    res.status(500).json({ error: 'Error updating food' });
  }
});

app.delete('/foods/:id', async (req, res) => {
  try {
    const deletedFood = await Food.findByIdAndDelete(req.params.id);
    if (!deletedFood) {
      return res.status(404).json({ error: 'Food not found' });
    }
    res.status(200).json({
      message: '✅ Food deleted successfully',
      data: deletedFood
    });
  } catch (error) {
    console.error('❌ Error deleting food:', error.message);
    res.status(500).json({ error: 'Error deleting food' });
  }
});

// Order Routes
app.post('/orders', async (req, res) => {
  try {
    const { userName, foodItems, totalPrice, deliveryAddress, deliveryPrice, userPhone } = req.body;

    if (!userName || !foodItems || !totalPrice || !deliveryAddress || !deliveryPrice || !userPhone) {
      return res.status(400).json({ error: 'All fields are required' });
    }

    console.log('Received order data:', req.body);

    const latestOrder = await Order.findOne().sort({ orderNumber: -1 });
    const orderNumber = Number(latestOrder?.orderNumber) + 1 || 1;

    console.log('Generated order number:', orderNumber);

    const newOrder = new Order({ 
      userName, 
      foodItems, 
      totalPrice, 
      deliveryAddress, 
      deliveryPrice, 
      userPhone,
      orderNumber,
      status: 'pending'
    });

    const savedOrder = await newOrder.save();

    res.status(201).json({
      message: '✅ Order saved successfully',
      data: savedOrder
    });
  } catch (error) {
    console.error('❌ Error saving order:', error.message);
    res.status(500).json({ error: 'Error saving order' });
  }
});

// Status counts route - must come before /orders/:id
app.get('/orders/status-counts', async (req, res) => {
  try {
    const counts = await Order.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    const statusCounts = counts.reduce((acc, curr) => {
      acc[curr._id] = curr.count;
      return acc;
    }, {
      pending: 0,
      preparing: 0,
      delivering: 0,
      delivered: 0
    });

    res.status(200).json({
      message: '✅ Retrieved order status counts successfully',
      data: statusCounts
    });
  } catch (error) {
    console.error('❌ Error retrieving order status counts:', error.message);
    res.status(500).json({ error: 'Error retrieving order status counts' });
  }
});

app.get('/orders', async (req, res) => {
  try {
    const orders = await Order.find().populate('foodItems.foodId');
    res.status(200).json({
      message: '✅ Retrieved all orders successfully',
      data: orders
    });
  } catch (error) {
    console.error('❌ Error retrieving orders:', error.message);
    res.status(500).json({ error: 'Error retrieving orders' });
  }
});

app.get('/orders/:id', async (req, res) => {
  try {
    const order = await Order.findById(req.params.id).populate('foodItems.foodId');
    if (!order) {
      return res.status(404).json({ error: 'Order not found' });
    }
    res.status(200).json({
      message: '✅ Retrieved order successfully',
      data: order
    });
  } catch (error) {
    console.error('❌ Error retrieving order:', error.message);
    res.status(500).json({ error: 'Error retrieving order' });
  }
});

app.put('/orders/:id', async (req, res) => {
  try {
    const { status } = req.body;

    if (!status) {
      return res.status(400).json({ error: 'Status is required' });
    }

    const updatedOrder = await Order.findByIdAndUpdate(
      req.params.id,
      { status },
      { new: true }
    );

    if (!updatedOrder) {
      return res.status(404).json({ error: 'Order not found' });
    }

    res.status(200).json({
      message: '✅ Order status updated successfully',
      data: updatedOrder
    });
  } catch (error) {
    console.error('❌ Error updating order:', error.message);
    res.status(500).json({ error: 'Error updating order' });
  }
});

app.delete('/orders/:id', async (req, res) => {
  try {
    const deletedOrder = await Order.findByIdAndDelete(req.params.id);
    if (!deletedOrder) {
      return res.status(404).json({ error: 'Order not found' });
    }
    res.status(200).json({
      message: '✅ Order deleted successfully',
      data: deletedOrder
    });
  } catch (error) {
    console.error('❌ Error deleting order:', error.message);
    res.status(500).json({ error: 'Error deleting order' });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});








...............















const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const path = require('path');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Database models
const Food = require('./models/Food');
const Order = require('./models/Order');

// Middleware
app.use(express.json());
app.use(cors());

// Configure multer for file uploads (in memory)
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: (req, file, cb) => {
    const filetypes = /jpeg|jpg|png|gif/;
    const mimetype = filetypes.test(file.mimetype);
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());

    if (mimetype && extname) {
      return cb(null, true);
    }
    cb(new Error('Only image files are allowed'));
  }
});

// Database connection
mongoose.connect(process.env.MONGODB_URI)
  .then(() => {
    console.log('✅ Connected to MongoDB Atlas');
    app.listen(PORT, () => {
      console.log(`🚀 Server running on port ${PORT}`);
    });
  })
  .catch(err => {
    console.error('❌ MongoDB connection error:', err.message);
    process.exit(1);
  });

// Routes
app.get('/', (req, res) => {
  res.send('Food Delivery API is running');
});

// Food Routes with Image Upload
app.post('/foods', upload.single('image'), async (req, res) => {
  try {
    const { name, price, description } = req.body;

    if (!name || !price || !description || !req.file) {
      return res.status(400).json({ error: 'All fields including image are required' });
    }

    const newFood = new Food({
      name,
      price,
      description,
      image: {
        data: req.file.buffer,
        contentType: req.file.mimetype
      }
    });

    const savedFood = await newFood.save();

    // Don't send binary data in response
    const responseFood = savedFood.toObject();
    delete responseFood.image;

    res.status(201).json({
      message: '✅ Food saved successfully',
      data: responseFood
    });
  } catch (error) {
    console.error('❌ Error saving food:', error.message);
    res.status(500).json({ error: 'Error saving food' });
  }
});

// Get food image
app.get('/foods/:id/image', async (req, res) => {
  try {
    const food = await Food.findById(req.params.id);
    if (!food || !food.image.data) {
      return res.status(404).json({ error: 'Image not found' });
    }

    res.set('Content-Type', food.image.contentType);
    res.send(food.image.data);
  } catch (error) {
    console.error('❌ Error retrieving image:', error.message);
    res.status(500).json({ error: 'Error retrieving image' });
  }
});

// Get food details (without image data)
app.get('/foods', async (req, res) => {
  try {
    const foods = await Food.find().select('-image.data');
    res.status(200).json({
      message: '✅ Retrieved all foods successfully',
      data: foods
    });
  } catch (error) {
    console.error('❌ Error retrieving foods:', error.message);
    res.status(500).json({ error: 'Error retrieving foods' });
  }
});

app.get('/foods/:id', async (req, res) => {
  try {
    const food = await Food.findById(req.params.id).select('-image.data');
    if (!food) {
      return res.status(404).json({ error: 'Food not found' });
    }
    res.status(200).json({
      message: '✅ Retrieved food successfully',
      data: food
    });
  } catch (error) {
    console.error('❌ Error retrieving food:', error.message);
    res.status(500).json({ error: 'Error retrieving food' });
  }
});

app.put('/foods/:id', upload.single('image'), async (req, res) => {
  try {
    const { name, price, description } = req.body;
    const updateData = { name, price, description };

    if (req.file) {
      updateData.image = {
        data: req.file.buffer,
        contentType: req.file.mimetype
      };
    }

    const updatedFood = await Food.findByIdAndUpdate(
      req.params.id,
      updateData,
      { new: true }
    ).select('-image.data');

    if (!updatedFood) {
      return res.status(404).json({ error: 'Food not found' });
    }

    res.status(200).json({
      message: '✅ Food updated successfully',
      data: updatedFood
    });
  } catch (error) {
    console.error('❌ Error updating food:', error.message);
    res.status(500).json({ error: 'Error updating food' });
  }
});

app.delete('/foods/:id', async (req, res) => {
  try {
    const deletedFood = await Food.findByIdAndDelete(req.params.id);
    if (!deletedFood) {
      return res.status(404).json({ error: 'Food not found' });
    }
    res.status(200).json({
      message: '✅ Food deleted successfully',
      data: deletedFood
    });
  } catch (error) {
    console.error('❌ Error deleting food:', error.message);
    res.status(500).json({ error: 'Error deleting food' });
  }
});

// Order Routes (unchanged from your original)
// In your server code (order route)
app.post('/orders', async (req, res) => {
  try {
    const { userName, foodItems, totalPrice, deliveryAddress, deliveryPrice, userPhone } = req.body;

    if (!userName || !foodItems || !totalPrice || !deliveryAddress || !deliveryPrice || !userPhone) {
      return res.status(400).json({ error: 'All fields are required' });
    }

    console.log('Received order data:', req.body);

    const latestOrder = await Order.findOne().sort({ orderNumber: -1 });
    const orderNumber = Number(latestOrder?.orderNumber) + 1 || 1;

    console.log('Generated order number:', orderNumber);

    const newOrder = new Order({ 
      userName, 
      foodItems, 
      totalPrice, 
      deliveryAddress, 
      deliveryPrice, 
      userPhone,
      orderNumber,
      status: 'pending'
    });

    const savedOrder = await newOrder.save();

    res.status(201).json({
      message: '✅ Order saved successfully',
      data: savedOrder
    });
  } catch (error) {
    console.error('❌ Error saving order:', error.message);
    res.status(500).json({ error: 'Error saving order' });
  }
});


app.get('/orders', async (req, res) => {
  try {
    const orders = await Order.find().populate('foodItems.foodId');
    res.status(200).json({
      message: '✅ Retrieved all orders successfully',
      data: orders
    });
  } catch (error) {
    console.error('❌ Error retrieving orders:', error.message);
    res.status(500).json({ error: 'Error retrieving orders' });
  }
});

app.get('/orders/:id', async (req, res) => {
  try {
    const order = await Order.findById(req.params.id).populate('foodItems.foodId');
    if (!order) {
      return res.status(404).json({ error: 'Order not found' });
    }
    res.status(200).json({
      message: '✅ Retrieved order successfully',
      data: order
    });
  } catch (error) {
    console.error('❌ Error retrieving order:', error.message);
    res.status(500).json({ error: 'Error retrieving order' });
  }
});

app.put('/orders/:id', async (req, res) => {
  try {
    const { userName, foodItems, totalPrice, deliveryAddress, deliveryPrice } = req.body;

    if (!userName || !foodItems || !totalPrice || !deliveryAddress || !deliveryPrice) {
      return res.status(400).json({ error: 'All fields are required' });
    }

    const updatedOrder = await Order.findByIdAndUpdate(
      req.params.id,
      { userName, foodItems, totalPrice, deliveryAddress, deliveryPrice },
      { new: true }
    );

    if (!updatedOrder) {
      return res.status(404).json({ error: 'Order not found' });
    }

    res.status(200).json({
      message: '✅ Order updated successfully',
      data: updatedOrder
    });
  } catch (error) {
    console.error('❌ Error updating order:', error.message);
    res.status(500).json({ error: 'Error updating order' });
  }
});

app.delete('/orders/:id', async (req, res) => {
  try {
    const deletedOrder = await Order.findByIdAndDelete(req.params.id);
    if (!deletedOrder) {
      return res.status(404).json({ error: 'Order not found' });
    }
    res.status(200).json({
      message: '✅ Order deleted successfully',
      data: deletedOrder
    });
  } catch (error) {
    console.error('❌ Error deleting order:', error.message);
    res.status(500).json({ error: 'Error deleting order' });
  }
});
app.get('/orders/status-counts', async (req, res) => {
  try {
    const counts = await Order.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    const statusCounts = counts.reduce((acc, curr) => {
      acc[curr._id] = curr.count;
      return acc;
    }, {});

    res.status(200).json({
      message: '✅ Retrieved order status counts successfully',
      data: statusCounts
    });
  } catch (error) {
    console.error('❌ Error retrieving order status counts:', error.message);
    res.status(500).json({ error: 'Error retrieving order status counts' });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});